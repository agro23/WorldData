using System.Collections.Generic;
using MySql.Data.MySqlClient;
using ToDoList;
using System;

namespace ToDoList.Models
{
  public class Item
  {
    private int _id;
    private string _description;

    public Item (string Description, int Id = 0)
    {
      _id = Id;
      _description = Description;
    }

        // public string GetDescription()
        // {
        //   return _description;
        // }
        // public void SetDescription(string newDescription)
        // {
        //   _description = newDescription;
        // }
        //
        // public int GetID()
        // {
        //   return _id;
        // }

        public static List<Item> GetAll()
        {
            List<Item> allItems = new List<Item> {};
            MySqlConnection conn = DB.Connection();
            conn.Open();
            MySqlCommand cmd = conn.CreateCommand() as MySqlCommand;
            cmd.CommandText = @"SELECT * FROM items;";
            MySqlDataReader rdr = cmd.ExecuteReader() as MySqlDataReader;
            while(rdr.Read())
            {
              int itemId = rdr.GetInt32(0);
              string itemDescription = rdr.GetString(1);
              Item newItem = new Item(itemDescription, itemId);
              allItems.Add(newItem);
            }
            conn.Close();
            if (conn != null)
            {
                conn.Dispose();
            }
            return allItems;
        }

        public static List<Item> GetItem (int id)
        {
            // List<Item> allItems = new List<Item> {};
            // allItems = Item.GetAll();
            // return allItems[id];
            //
            // MySqlConnection conn = DB.Connection();
            // conn.Open();
            //
            // var cmd = conn.CreateCommand() as MySqlCommand;
            // cmd.CommandText = @"SELECT id FROM items;";
            //
            // cmd.ExecuteNonQuery();
            //
            // conn.Close();
            // if (conn != null)
            // {
            //     conn.Dispose();
            // }
        }

        public static void AddItem (int id)
        {
          // get info from form page
          // append info from form page (dynamically built from column info)
          // reindex? return some sort of token that it succeeded?
        }

        public static void EditItem (int id){
          // get Item number from List
          // display contents to Edit.cshtml into inidividual text fields
          // Button to post back
          // UPDATE Item[id] in DB.
        }

        public static void DeleteItem (int id)
        {
          // Item myItem = Item.GetItem(id);
          // DROP item? DELETE Item(myItem)? How in SQL?
          // How do I issue the appropriate command?
        }

        public static void DeleteAll()
       {
           MySqlConnection conn = DB.Connection();
           conn.Open();

           var cmd = conn.CreateCommand() as MySqlCommand;
           cmd.CommandText = @"DELETE FROM items;";

           cmd.ExecuteNonQuery();

           conn.Close();
           if (conn != null)
           {
               conn.Dispose();
           }
      }

        // public void Save()
        // {
        //   _instances.Add(this);
        // }
        // public static void ClearAll()
        // {
        //   _instances.Clear();
        // }

  }
}
